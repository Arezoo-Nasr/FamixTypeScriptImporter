@startuml scoping
skinparam style strictuml
' skinparam Linetype ortho
hide empty members
class Namespace
class Module
class "Function" as function
class Variable
class Scope
Namespace *-- "*" Namespace
File "1..*" --* Namespace
Variable "*" -- "1" Scope
Scope <|-- Namespace
Scope <|-- function
Scope <|-- Block
Scope <|-- Global
note as fscope
Attributes in a class
are essentially variables
declared in a function
(in emitted javascript)
end note
fscope .r. Variable

class Class
class Attribute

Class "1" -- "*" Attribute
fscope .l. Attribute
'fscope .. Class
@enduml


@startuml SimplerScope
title TypeScript metamodel
skinparam style strictuml
' skinparam SameClassWidth true
' skinparam Linetype ortho
hide empty members
class Type #LightGreen
'class TypeAlias
class "Variable" as Variable #LightBlue
class Module
class Class #LightGreen extends Type
class Field #LightBlue
class Function
class Method #LightPink {
'    returnType: Type
    isConstructor : boolean
}
class Interface #LightGreen extends Type

Module *-- "*" Variable
Module *-- "*" Function
Function *-- "*" Variable
Function *-- "*" Function

Module *-- "*" Class

Module *-- "*" Interface
Interface *-- "*" Field
Method "*" -- "1" Type
' ts interfaces don't have methods, they're named types of objects

Class *-- "*" Method
Class  *-- "*" Field
Method *-- "*" Function
Method *-- "*" Variable

Variable "*" -- "1" Type
Field "*" -- "1" Type

legend
Note: block scope for variables is abstracted to 
function/method scope, because the goal is 
to identify dependencies between higher level
entities.
end legend

@enduml